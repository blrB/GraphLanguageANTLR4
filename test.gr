// Graph Language

graph t = "TEST"

main {
    print "START"

    graph gr = "new graph 1"
    graph gr2 = "new graph 2"
    vertex b = "B"
    vertex c = "C"
    edge e = <b,c>
    edge e2 = function()

    gr <- b, a , v, d
    gr -> c , a, b , d

    if (b == a){
        print "b == a"
    }
    if (b != a) {
        print "b != a"
    }

    if (gr <?> a) {
        print "GR CONTAIN A"
    } else if (gr is graph){
        print "GR not contain A and is GRAPH"
    } else {
        print "GR not contain A and is not GRAPH"
    }

    while(gr <?> a){
        print "contain a"
    }

    forEach(vertex v in g){
        print "for each vertex"
    }

    forEach(edge e in g){
        print "for each vertex"
    }

    f()
    fg(g, v)

    print "FINISH"
}

fn f(){
    print "fn f"
}

fn graph fg(graph g, vertex v){
    g <- v
    return g
}

